pipeline {
    agent any

    triggers {
        pollSCM('* * * * *')
    }

    environment {
        SERVICE_NAME = "flask-app"
        APP_PORT = "6060"
        WORKSPACE_PATH = "${WORKSPACE}"
        PATH = "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"
        TEST_PATH = "${WORKSPACE_PATH}/project/tests"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/nuclear77/theGP.git'
                    ]]
                ]
            }
        }

        stage('Setup Virtualenv') {
            steps {
                sh """
                python3 -m venv venv
                . venv/bin/activate
                pip install flake8 requests prometheus_client
                """
            }
        }

        stage('Lint Python Code') {
            steps {
                sh """
                . venv/bin/activate
                flake8 ${WORKSPACE_PATH}/project/app/ || echo "Lint issues found"
                """
            }
        }

        stage('Verify Files') {
            steps {
                sh "ls -la ${WORKSPACE_PATH}/project/app/app.py"
                sh "ls -la ${WORKSPACE_PATH}/project/ansible/playbook.yml"
                sh "ls -la ${WORKSPACE_PATH}/project/ansible/templates/flask-app.service.j2"
                sh "ls -la ${TEST_PATH}/test_app.py"
            }
        }

        stage('Deploy with Ansible') {
            steps {
                sh """
                ansible-playbook ${WORKSPACE_PATH}/project/ansible/playbook.yml \
                    -i "localhost," \
                    --connection=local \
                    -e "app_port=${APP_PORT}" \
                    -e "app_source_dir=${WORKSPACE_PATH}/project/app" \
                    -e "ansible_template_dir=${WORKSPACE_PATH}/project/ansible/templates"
                """
            }
        }

        stage('Restart Service') {
            steps {
                sh """
                sudo systemctl daemon-reload
                sudo systemctl restart ${SERVICE_NAME}
                sudo systemctl status ${SERVICE_NAME} --no-pager
                """
            }
        }

        stage('Verify Deployment') {
            steps {
                sh "curl --retry 3 --retry-delay 5 --connect-timeout 10 http://localhost:${APP_PORT}/health"
            }
        }

        stage('Run Integration Tests') {
            steps {
                sh """
                . venv/bin/activate
                cd ${TEST_PATH}
                python -m unittest test_app.py
                """
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                def emoji = status == 'SUCCESS' ? '✅' : '❌'

                withCredentials([
                    string(credentialsId: 'telegram-bot-token', variable: 'BOT_TOKEN'),
                    string(credentialsId: 'telegram-chat-id', variable: 'CHAT_ID')
                ]) {
                    sh """
                    curl -s -X POST "https://api.telegram.org/bot\${BOT_TOKEN}/sendMessage" \
                        -d chat_id="\${CHAT_ID}" \
                        -d text="${emoji} Build ${status}: ${env.JOB_NAME} #${env.BUILD_NUMBER}" \
                        -d parse_mode="Markdown"
                    """
                }
            }
        }
    }
}