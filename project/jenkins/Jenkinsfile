pipeline {
    agent any

    triggers {
        pollSCM('* * * * *')
    }

    environment {
        SERVICE_NAME = "flask-app"
        APP_PORT = "6060"
        WORKSPACE_PATH = "${WORKSPACE}"
        PATH = "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"
        TEST_PATH = "${WORKSPACE_PATH}/project/tests"
        PROMETHEUS_PORT = "9090"
        ALERTMANAGER_PORT = "9093"
        NODE_EXPORTER_PORT = "9100"
        APP_PATH = "${WORKSPACE_PATH}/app"
        APP_REPO_URL = "https://github.com/nuclear77/PG.git"

    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/nuclear77/theGP.git'
                    ]]
                ]
            }
        }

        stage('Checkout Application Code') {
            steps {
                dir('app') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/master']],
                        extensions: [[$class: 'CleanBeforeCheckout']],
                        userRemoteConfigs: [[
                            url: "${APP_REPO_URL}"
                        ]]
                    ])
                }
            }
        }


        stage('Setup Environment') {
            steps {
                sh "sudo apt-get update"
                sh "sudo apt-get install -y python3-venv"
            }
        }

        stage('Setup Virtualenv') {
            steps {
                sh """
                python3 -m venv venv
                . venv/bin/activate
                pip install flake8 requests prometheus_client
                """
            }
        }

        stage('Lint Python Code') {
            steps {
                sh """
                . venv/bin/activate
                flake8 ${APP_PATH} || echo "Lint issues found"
                """
            }
        }

        stage('Deploy Infrastructure') {
            steps {
                withCredentials([
                    string(credentialsId: 'telegram-bot-token', variable: 'BOT_TOKEN'),
                    string(credentialsId: 'telegram-chat-id', variable: 'CHAT_ID')
                ]) {
                sh """
                ansible-playbook ${WORKSPACE_PATH}/project/ansible/playbook.yml \
                    -i inventory.ini \
                    -i "localhost," \
                    --connection=local\
                    -e "telegram_bot_token=${BOT_TOKEN}" \
                    -e "telegram_chat_id=${CHAT_ID}"
                """
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
            sh """
            sudo rm -rf /opt/flask-app
            sudo git clone ${APP_REPO_URL} /opt/flask-app -b master
            sudo chown -R jenkins:jenkins /opt/flask-app
            """

            sh """
            cd /opt/flask-app/app
            python3 -m venv ../venv
            source ../venv/bin/activate
            pip install -r requirements.txt
            deactivate
            """

            sh """
            # Заменяем переменные в шаблоне
            sed "s|{{ app_port }}|${APP_PORT}|g" \
                ${WORKSPACE_PATH}/project/ansible/roles/jenkins/templates/flask-app.service.j2 | \
            sed "s|{{ working_directory }}|/opt/flask-app/app|g" | \
            sed "s|{{ exec_start }}|/opt/flask-app/venv/bin/python /opt/flask-app/app/app.py|g" \
                > /tmp/flask-app.service

            sudo cp /tmp/flask-app.service /etc/systemd/system/${SERVICE_NAME}.service
            sudo chown root:root /etc/systemd/system/${SERVICE_NAME}.service
            sudo chmod 0644 /etc/systemd/system/${SERVICE_NAME}.service
            """

            sh """
            sudo systemctl daemon-reload
            sudo systemctl restart ${SERVICE_NAME}
            """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                retry(3) {
                    sleep 5
                    sh "curl --connect-timeout 10 http://localhost:${APP_PORT}/health"
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                sh """
                . venv/bin/activate
                cd ${TEST_PATH}
                python -m unittest test_app.py
                """
            }
        }

        stage('Test Alerting') {
            steps {
                script {
                    sh """
                    sudo tee -a /etc/prometheus/alerts.yml <<EOF

                  - alert: JenkinsTestAlert
                    expr: vector(1)
                    for: 1m
                    labels:
                      severity: warning
                    annotations:
                      description: "Test alert from Jenkins build ${BUILD_NUMBER}"
                    EOF

                    sudo systemctl reload prometheus

                    sleep 70
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                def emoji = status == 'SUCCESS' ? '✅' : '❌'
                def message = "${emoji} Build ${status}: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                message += "\n• Prometheus: http://localhost:${PROMETHEUS_PORT}"
                message += "\n• Alertmanager: http://localhost:${ALERTMANAGER_PORT}"

                withCredentials([
                    string(credentialsId: 'telegram-bot-token', variable: 'BOT_TOKEN'),
                    string(credentialsId: 'telegram-chat-id', variable: 'CHAT_ID')
                ]) {
                    sh """
                    curl -s -X POST "https://api.telegram.org/bot\${BOT_TOKEN}/sendMessage" \
                        -d chat_id="\${CHAT_ID}" \
                        -d text="${message}" \
                        -d parse_mode="Markdown"
                    """
                }

                sh "sudo sed -i '/JenkinsTestAlert/,/EOF/d' /etc/prometheus/alerts.yml"
                if (sh(script: 'systemctl is-active prometheus', returnStatus: true) == 0) {
                    sh 'sudo systemctl reload prometheus'
                } else {
                    sh 'sudo systemctl start prometheus'
                }
            }
            cleanWs()
        }
    }
}