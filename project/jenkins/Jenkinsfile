pipeline {
    agent any

    triggers {
        pollSCM('* * * * *')
    }

    environment {
        SERVICE_NAME = "flask-app"
        APP_PORT = "6060"
        WORKSPACE_PATH = "${WORKSPACE}"
        PATH = "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"
        PIP_CACHE_DIR = "${WORKSPACE}/.pip-cache"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/nuclear77/theGP.git'
                    ]]
                ]
            }
        }

    stage('Setup Virtualenv') {
        steps {
            sh """
            python -m venv ${WORKSPACE}/.venv
            . ${WORKSPACE}/.venv/bin/activate
            pip install flake8
            """
        }
    }

        stage('Lint Python Code') {
            steps {
                sh """
                flake8 ${WORKSPACE_PATH}/project/app/ \
                    --config=${WORKSPACE_PATH}/.flake8 \
                    --format=html > ${WORKSPACE}/flake8_report.html || true
                """
            }
            post {
                always {
                    publishHTML target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'flake8_report.html',
                        reportName: 'Flake8 Report'
                    ]
                }
            }
        }

        stage('Verify Files') {
            steps {
                sh "ls -la ${WORKSPACE_PATH}/project/app/app.py"
                sh "ls -la ${WORKSPACE_PATH}/project/ansible/playbook.yml"
                sh "ls -la ${WORKSPACE_PATH}/project/ansible/templates/flask-app.service.j2"
            }
        }

        stage('Deploy with Ansible') {
            steps {
                sh """
                ansible-playbook ${WORKSPACE_PATH}/project/ansible/playbook.yml \
                    -i "localhost," \
                    --connection=local \
                    -e "app_port=${APP_PORT}" \
                    -e "app_source_dir=${WORKSPACE_PATH}/project/app" \
                    -e "ansible_template_dir=${WORKSPACE_PATH}/project/ansible/templates"
                """
            }
        }

        stage('Restart Service') {
            steps {
                sh """
                sudo systemctl daemon-reload
                sudo systemctl restart ${SERVICE_NAME}
                sudo systemctl status ${SERVICE_NAME} --no-pager
                """
            }
        }

        stage('Verify Deployment') {
            steps {
                sh "curl --retry 3 --retry-delay 5 --connect-timeout 10 http://localhost:${APP_PORT}/health"
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "✅ Приложение успешно запущено на порту ${APP_PORT}"
            emailext (
                subject: "SUCCESS: ${env.JOB_NAME} build #${env.BUILD_NUMBER}",
                body: "Приложение успешно развернуто на порту ${APP_PORT}",
                to: 'spiritvoideu@gmail.com',
                mimeType: 'text/html'
            )
        }
        failure {
            echo "❌ Ошибка развертывания на порту ${APP_PORT}"
            emailext (
                subject: "FAILURE: ${env.JOB_NAME} build #${env.BUILD_NUMBER} - Требуется внимание!",
                body: "Сборка ${env.BUILD_NUMBER} завершилась с ошибкой. Срочно проверьте логи!",
                to: 'spiritvoideu@gmail.com',
                mimeType: 'text/html'
            )
        }
    }
}