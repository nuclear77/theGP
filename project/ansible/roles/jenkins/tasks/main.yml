- name: Add Jenkins repository key
  apt_key:
    url: "https://pkg.jenkins.io/debian-stable/jenkins.io.key"
    state: present

- name: Add Jenkins repository
  apt_repository:
    repo: "deb https://pkg.jenkins.io/debian-stable binary/"
    state: present
    filename: "jenkins"

- name: Install Jenkins
  apt:
    name: jenkins
    state: present
    update_cache: yes

- name: Start Jenkins service
  systemd:
    name: jenkins
    state: started
    enabled: yes

- name: Wait for Jenkins initialization
  wait_for:
    port: 8080
    delay: 10
    timeout: 120

- name: Check if Flask job exists
  uri:
    url: "http://localhost:8080/job/flask/api/json"
    method: GET
    status_code: 200
    return_content: yes
    headers:
      Accept: "application/json"
  register: job_check
  ignore_errors: yes
  changed_when: false

- name: Apply Jenkins Configuration as Code
  block:
    - name: Install Jenkins Configuration as Code plugin
      community.general.jenkins_plugin:
        name: configuration-as-code
        jenkins_home: /var/lib/jenkins
        state: present

    - name: Restart Jenkins to activate plugin
      systemd:
        name: jenkins
        state: restarted

    - name: Wait after restart
      wait_for:
        port: 8080
        delay: 20
        timeout: 180

    - name: Copy JCasC configuration
      copy:
        src: jenkins.yaml
        dest: /var/lib/jenkins/jenkins.yaml
        owner: jenkins
        group: jenkins
        mode: "0644"

    - name: Apply JCasC configuration via CLI
      shell: |
        curl -X POST http://localhost:8080/configuration-as-code/reload \
          --user "admin:{{ jenkins_admin_password }}"
      args:
        executable: /bin/bash
      register: casc_apply
      changed_when: "'Configuration reloaded' in casc_apply.stdout"

  when: job_check.status != 200 or job_check is failed

- name: Install system dependencies
  apt:
    name:
      - python3-pip
      - python3-venv
      - git
    state: present

- name: Create app directory
  file:
    path: /opt/flask-app
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create virtual environment
  shell: |
    python3 -m venv /opt/flask-app/venv
  args:
    executable: /bin/bash

- name: Install Python requirements
  pip:
    requirements: /opt/flask-app/app/requirements.txt
    virtualenv: /opt/flask-app/venv
    virtualenv_python: python3