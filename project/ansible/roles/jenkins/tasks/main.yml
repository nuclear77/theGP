---
- name: Add Jenkins repository key
  apt_key:
    url: "https://pkg.jenkins.io/debian-stable/jenkins.io.key"
    state: present

- name: Add Jenkins repository
  apt_repository:
    repo: "deb https://pkg.jenkins.io/debian-stable binary/"
    state: present
    filename: "jenkins"

- name: Install Jenkins
  apt:
    name: jenkins
    state: present
    update_cache: yes

- name: Disable initial setup wizard
  lineinfile:
    path: /etc/default/jenkins
    regexp: "^JAVA_ARGS="
    line: 'JAVA_ARGS="-Djenkins.install.runSetupWizard=false"'
    state: present
  notify: restart jenkins

- name: Start Jenkins service
  systemd:
    name: jenkins
    state: started
    enabled: yes

- name: Wait for Jenkins to be ready
  uri:
    url: http://localhost:8080/login
    status_code: 200
    timeout: 5
  register: result
  until: result.status == 200
  retries: 30
  delay: 5

- name: Get initial admin password
  shell: cat /var/lib/jenkins/secrets/initialAdminPassword
  register: jenkins_initial_password
  changed_when: false
  no_log: true

- name: Install Jenkins plugins
  community.general.jenkins_plugin:
    name: "{{ item }}"
    state: present
    url: http://localhost:8080
    timeout: 60
    username: admin
    password: "{{ jenkins_initial_password.stdout }}"
  loop:
    - git
    - workflow-aggregator
    - job-dsl
    - pipeline-utility-steps
    - ansible
  notify: safe restart jenkins

- name: Wait after plugins installation
  wait_for:
    port: 8080
    delay: 10
    timeout: 120

- name: Check if flask job exists
  community.general.jenkins_job_info:
    name: "flask"
    url: http://localhost:8080
  register: job_check
  ignore_errors: yes

- name: Create flask job from template
  community.general.jenkins_job:
    name: "flask"
    config: "{{ lookup('template', 'jenkins-job-seed.xml.j2') }}"
    url: http://localhost:8080
    username: admin
    password: "{{ jenkins_initial_password.stdout }}"
    timeout: 60
  when: job_check is failed or job_check.jobs is not defined

- name: Install system dependencies
  apt:
    name:
      - python3-pip
      - python3-venv
      - git
    state: present

- name: Create app directory
  file:
    path: /opt/flask-app
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create virtual environment
  shell: |
    python3 -m venv /opt/flask-app/venv
  args:
    executable: /bin/bash

- name: Install Python requirements
  pip:
    requirements: /opt/flask-app/app/requirements.txt
    virtualenv: /opt/flask-app/venv
    virtualenv_python: python3
