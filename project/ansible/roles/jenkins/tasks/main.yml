- name: Add Jenkins repository key
  apt_key:
    url: "https://pkg.jenkins.io/debian-stable/jenkins.io.key"
    state: present

- name: Add Jenkins repository
  apt_repository:
    repo: "deb https://pkg.jenkins.io/debian-stable binary/"
    state: present
    filename: "jenkins"

- name: Install Jenkins
  apt:
    name: jenkins
    state: present
    update_cache: yes

- name: Start Jenkins service
  systemd:
    name: jenkins
    state: started
    enabled: yes

- name: Wait for Jenkins initialization
  wait_for:
    port: 8080
    delay: 10
    timeout: 120

- name: Install required plugins
  community.general.jenkins_plugin:
    name:
      - configuration-as-code
      - git
      - workflow-aggregator
      - ansible
      - pipeline-utility-steps
      - credentials-binding
      - ws-cleanup
    state: present
  register: plugins_result
  until: plugins_result is success
  retries: 10
  delay: 15

- name: Create JCasC config directory
  file:
    path: /var/lib/jenkins/casc_configs
    state: directory
    owner: jenkins
    group: jenkins
    mode: '0755'

- name: Deploy JCasC main configuration
  template:
    src: jenkins.yaml.j2
    dest: /var/lib/jenkins/casc_configs/jenkins.yaml
    owner: jenkins
    group: jenkins
    mode: '0644'
  vars:
    jenkins_admin_password_escaped: "{{ jenkins_admin_password | string | to_json }}"
    telegram_bot_token_escaped: "{{ telegram_bot_token | string | to_json }}"
    telegram_chat_id_escaped: "{{ telegram_chat_id | string | to_json }}"

- name: Configure JCasC environment
  lineinfile:
    path: /etc/default/jenkins
    regexp: '^CASC_JENKINS_CONFIG='
    line: 'CASC_JENKINS_CONFIG=/var/lib/jenkins/casc_configs/jenkins.yaml'
    state: present
    insertafter: EOF

- name: Restart Jenkins service
  systemd:
    name: jenkins
    state: restarted

- name: Wait for Jenkins after restart
  wait_for:
    port: 8080
    delay: 10
    timeout: 50

- name: Install system dependencies
  apt:
    name:
      - python3-pip
      - python3-venv
      - git
      - ansible
      - curl
    state: present

- name: Create app directory
  file:
    path: /opt/flask-app
    state: directory
    owner: jenkins
    group: jenkins
    mode: '0755'

- name: Create virtual environment
  shell: |
    python3 -m venv /opt/flask-app/venv
  args:
    executable: /bin/bash
  become: yes
  become_user: jenkins

- name: Install Python requirements
  pip:
    requirements: /opt/flask-app/app/requirements.txt
    virtualenv: /opt/flask-app/venv
    virtualenv_python: python3
  become: yes
  become_user: jenkins